{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport formStyles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport { DualListSelectorListItem } from './DualListSelectorListItem';\nexport class DualListSelectorPane extends React.Component {\n  constructor(props) {\n    super(props);\n    this.menuEl = React.createRef();\n    this.optionsRefs = [];\n\n    this.onChange = e => {\n      this.setState({\n        input: e.target.value\n      });\n      this.optionsRefs = [];\n    };\n\n    this.sendRef = (optionRef, index) => {\n      this.optionsRefs[index] = optionRef;\n    };\n\n    this.handleKeys = event => {\n      const key = event.key;\n      let moveFocus = false;\n      let currentIndex = -1;\n\n      if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(event.key)) {\n        if (document.activeElement === this.menuEl.current) {\n          currentIndex = 0;\n          moveFocus = true;\n          event.preventDefault();\n        } else {\n          this.optionsRefs.forEach((option, index) => {\n            if (document.activeElement === option) {\n              currentIndex = key === 'ArrowUp' || key === 'ArrowLeft' ? index - 1 : index + 1;\n              moveFocus = true;\n              event.preventDefault();\n            }\n          });\n        }\n      }\n\n      if (moveFocus && this.optionsRefs[currentIndex]) {\n        this.optionsRefs[currentIndex].focus();\n        this.setState({\n          focusedOption: `${this.props.id}-option-${currentIndex}`\n        });\n      }\n    };\n\n    this.displayOption = (option, input) => {\n      if (this.props.filterOption) {\n        return this.props.filterOption(option, input);\n      } else {\n        return option.toString().toLowerCase().includes(input.toLowerCase());\n      }\n    };\n\n    this.onOptionSelect = (e, index, isChosen) => {\n      this.setState({\n        focusedOption: `${this.props.id}-option-${index}`\n      });\n      this.props.onOptionSelect(e, index, isChosen);\n    };\n\n    this.state = {\n      input: '',\n      focusedOption: null\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleKeys);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeys);\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      isChosen,\n      title,\n      actions,\n      isSearchable,\n      searchInputAriaLabel,\n      className,\n      status,\n      selectedOptions,\n      options,\n      id,\n\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      filterOption,\n      onOptionSelect\n    } = _a,\n          props = __rest(_a, [\"isChosen\", \"title\", \"actions\", \"isSearchable\", \"searchInputAriaLabel\", \"className\", \"status\", \"selectedOptions\", \"options\", \"id\", \"filterOption\", \"onOptionSelect\"]);\n\n    const {\n      input,\n      focusedOption\n    } = this.state;\n    let displayIndex = -1;\n    return React.createElement(\"div\", Object.assign({\n      className: css(styles.dualListSelectorPane, isChosen ? styles.modifiers.chosen : 'pf-m-available', className)\n    }, props), title && React.createElement(\"div\", {\n      className: css(styles.dualListSelectorHeader)\n    }, React.createElement(\"div\", {\n      className: \"pf-c-dual-list-selector__title\"\n    }, React.createElement(\"div\", {\n      className: css(styles.dualListSelectorTitleText)\n    }, title))), (actions || isSearchable) && React.createElement(\"div\", {\n      className: css(styles.dualListSelectorTools)\n    }, isSearchable && React.createElement(\"div\", {\n      className: css(styles.dualListSelectorToolsFilter)\n    }, React.createElement(\"input\", {\n      className: css(formStyles.formControl, formStyles.modifiers.search),\n      type: \"search\",\n      onChange: this.onChange,\n      \"aria-label\": searchInputAriaLabel\n    })), actions && React.createElement(\"div\", {\n      className: css(styles.dualListSelectorToolsActions)\n    }, actions)), status && React.createElement(\"div\", {\n      className: css(styles.dualListSelectorStatus)\n    }, React.createElement(\"div\", {\n      className: css(styles.dualListSelectorStatusText),\n      id: `${id}-status`\n    }, status)), options && React.createElement(\"div\", {\n      className: css(styles.dualListSelectorMenu),\n      ref: this.menuEl,\n      tabIndex: 0\n    }, React.createElement(\"ul\", {\n      className: css(styles.dualListSelectorList),\n      role: \"listbox\",\n      \"aria-multiselectable\": \"true\",\n      \"aria-labelledby\": `${id}-status`,\n      \"aria-activedescendant\": focusedOption\n    }, options.map((option, index) => {\n      if (this.displayOption(option, input)) {\n        displayIndex = displayIndex + 1;\n        return React.createElement(DualListSelectorListItem, {\n          key: index,\n          isSelected: selectedOptions.indexOf(index) !== -1,\n          onOptionSelect: this.onOptionSelect,\n          isChosen: isChosen,\n          orderIndex: index,\n          filteredIndex: displayIndex,\n          sendRef: this.sendRef,\n          id: `${id}-option-${index}`\n        }, option);\n      }\n\n      return;\n    }))));\n  }\n\n}\nDualListSelectorPane.displayName = 'DualListSelectorPane';\nDualListSelectorPane.defaultProps = {\n  isChosen: false,\n  status: '',\n  title: '',\n  options: [],\n  selectedOptions: [],\n  isSearchable: false,\n  searchInputAriaLabel: ''\n};","map":{"version":3,"sources":["../../../../src/components/DualListSelector/DualListSelectorPane.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport formStyles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport { DualListSelectorListItem } from './DualListSelectorListItem';\nexport class DualListSelectorPane extends React.Component {\n    constructor(props) {\n        super(props);\n        this.menuEl = React.createRef();\n        this.optionsRefs = [];\n        this.onChange = (e) => {\n            this.setState({ input: e.target.value });\n            this.optionsRefs = [];\n        };\n        this.sendRef = (optionRef, index) => {\n            this.optionsRefs[index] = optionRef;\n        };\n        this.handleKeys = (event) => {\n            const key = event.key;\n            let moveFocus = false;\n            let currentIndex = -1;\n            if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(event.key)) {\n                if (document.activeElement === this.menuEl.current) {\n                    currentIndex = 0;\n                    moveFocus = true;\n                    event.preventDefault();\n                }\n                else {\n                    this.optionsRefs.forEach((option, index) => {\n                        if (document.activeElement === option) {\n                            currentIndex = key === 'ArrowUp' || key === 'ArrowLeft' ? index - 1 : index + 1;\n                            moveFocus = true;\n                            event.preventDefault();\n                        }\n                    });\n                }\n            }\n            if (moveFocus && this.optionsRefs[currentIndex]) {\n                this.optionsRefs[currentIndex].focus();\n                this.setState({ focusedOption: `${this.props.id}-option-${currentIndex}` });\n            }\n        };\n        this.displayOption = (option, input) => {\n            if (this.props.filterOption) {\n                return this.props.filterOption(option, input);\n            }\n            else {\n                return option\n                    .toString()\n                    .toLowerCase()\n                    .includes(input.toLowerCase());\n            }\n        };\n        this.onOptionSelect = (e, index, isChosen) => {\n            this.setState({ focusedOption: `${this.props.id}-option-${index}` });\n            this.props.onOptionSelect(e, index, isChosen);\n        };\n        this.state = {\n            input: '',\n            focusedOption: null\n        };\n    }\n    componentDidMount() {\n        window.addEventListener('keydown', this.handleKeys);\n    }\n    componentWillUnmount() {\n        window.removeEventListener('keydown', this.handleKeys);\n    }\n    render() {\n        const _a = this.props, { isChosen, title, actions, isSearchable, searchInputAriaLabel, className, status, selectedOptions, options, id, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        filterOption, onOptionSelect } = _a, props = __rest(_a, [\"isChosen\", \"title\", \"actions\", \"isSearchable\", \"searchInputAriaLabel\", \"className\", \"status\", \"selectedOptions\", \"options\", \"id\", \"filterOption\", \"onOptionSelect\"]);\n        const { input, focusedOption } = this.state;\n        let displayIndex = -1;\n        return (React.createElement(\"div\", Object.assign({ className: css(styles.dualListSelectorPane, isChosen ? styles.modifiers.chosen : 'pf-m-available', className) }, props),\n            title && (React.createElement(\"div\", { className: css(styles.dualListSelectorHeader) },\n                React.createElement(\"div\", { className: \"pf-c-dual-list-selector__title\" },\n                    React.createElement(\"div\", { className: css(styles.dualListSelectorTitleText) }, title)))),\n            (actions || isSearchable) && (React.createElement(\"div\", { className: css(styles.dualListSelectorTools) },\n                isSearchable && (React.createElement(\"div\", { className: css(styles.dualListSelectorToolsFilter) },\n                    React.createElement(\"input\", { className: css(formStyles.formControl, formStyles.modifiers.search), type: \"search\", onChange: this.onChange, \"aria-label\": searchInputAriaLabel }))),\n                actions && React.createElement(\"div\", { className: css(styles.dualListSelectorToolsActions) }, actions))),\n            status && (React.createElement(\"div\", { className: css(styles.dualListSelectorStatus) },\n                React.createElement(\"div\", { className: css(styles.dualListSelectorStatusText), id: `${id}-status` }, status))),\n            options && (React.createElement(\"div\", { className: css(styles.dualListSelectorMenu), ref: this.menuEl, tabIndex: 0 },\n                React.createElement(\"ul\", { className: css(styles.dualListSelectorList), role: \"listbox\", \"aria-multiselectable\": \"true\", \"aria-labelledby\": `${id}-status`, \"aria-activedescendant\": focusedOption }, options.map((option, index) => {\n                    if (this.displayOption(option, input)) {\n                        displayIndex = displayIndex + 1;\n                        return (React.createElement(DualListSelectorListItem, { key: index, isSelected: selectedOptions.indexOf(index) !== -1, onOptionSelect: this.onOptionSelect, isChosen: isChosen, orderIndex: index, filteredIndex: displayIndex, sendRef: this.sendRef, id: `${id}-option-${index}` }, option));\n                    }\n                    return;\n                }))))));\n    }\n}\nDualListSelectorPane.displayName = 'DualListSelectorPane';\nDualListSelectorPane.defaultProps = {\n    isChosen: false,\n    status: '',\n    title: '',\n    options: [],\n    selectedOptions: [],\n    isSearchable: false,\n    searchInputAriaLabel: ''\n};\n//# sourceMappingURL=DualListSelectorPane.js.map"]},"metadata":{},"sourceType":"module"}