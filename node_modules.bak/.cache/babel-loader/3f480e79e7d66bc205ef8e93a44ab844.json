{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { Button, ButtonVariant } from '../Button';\nimport AngleDoubleLeftIcon from \"@patternfly/react-icons/dist/esm/icons/angle-double-left-icon\";\nimport AngleLeftIcon from \"@patternfly/react-icons/dist/esm/icons/angle-left-icon\";\nimport AngleDoubleRightIcon from \"@patternfly/react-icons/dist/esm/icons/angle-double-right-icon\";\nimport AngleRightIcon from \"@patternfly/react-icons/dist/esm/icons/angle-right-icon\";\nimport { DualListSelectorPane } from './DualListSelectorPane';\nimport { getUniqueId } from '../../helpers';\nexport class DualListSelector extends React.Component {\n  constructor(props) {\n    super(props);\n    this.controlsEl = React.createRef();\n\n    this.addAll = () => {\n      this.setState(prevState => {\n        const newChosen = [...prevState.chosenOptions, ...prevState.availableOptions];\n\n        if (this.props.addAll) {\n          this.props.addAll([], newChosen);\n        }\n\n        if (this.props.onListChange) {\n          this.props.onListChange([], newChosen);\n        }\n\n        return {\n          availableOptions: [],\n          availableOptionsSelected: [],\n          chosenOptions: newChosen,\n          chosenOptionsSelected: []\n        };\n      });\n    };\n\n    this.removeAll = () => {\n      this.setState(prevState => {\n        const newAvailable = [...prevState.chosenOptions, ...prevState.availableOptions];\n\n        if (this.props.removeAll) {\n          this.props.removeAll(newAvailable, []);\n        }\n\n        if (this.props.onListChange) {\n          this.props.onListChange(newAvailable, []);\n        }\n\n        return {\n          availableOptions: newAvailable,\n          availableOptionsSelected: [],\n          chosenOptions: [],\n          chosenOptionsSelected: []\n        };\n      });\n    };\n\n    this.addSelected = () => {\n      this.setState(prevState => {\n        const itemsToRemove = [];\n        const newAvailable = [];\n        prevState.availableOptions.forEach((value, index) => {\n          if (prevState.availableOptionsSelected.indexOf(index) !== -1) {\n            itemsToRemove.push(value);\n          } else {\n            newAvailable.push(value);\n          }\n        });\n        const newChosen = [...prevState.chosenOptions, ...itemsToRemove];\n\n        if (this.props.addSelected) {\n          this.props.addSelected(newAvailable, newChosen);\n        }\n\n        if (this.props.onListChange) {\n          this.props.onListChange(newAvailable, newChosen);\n        }\n\n        return {\n          chosenOptionsSelected: [],\n          availableOptionsSelected: [],\n          chosenOptions: newChosen,\n          availableOptions: newAvailable\n        };\n      });\n    };\n\n    this.removeSelected = () => {\n      this.setState(prevState => {\n        const itemsToRemove = [];\n        const newChosen = [];\n        prevState.chosenOptions.forEach((value, index) => {\n          if (prevState.chosenOptionsSelected.indexOf(index) !== -1) {\n            itemsToRemove.push(value);\n          } else {\n            newChosen.push(value);\n          }\n        });\n        const newAvailable = [...prevState.availableOptions, ...itemsToRemove];\n\n        if (this.props.removeSelected) {\n          this.props.removeSelected(newAvailable, newChosen);\n        }\n\n        if (this.props.onListChange) {\n          this.props.onListChange(newAvailable, newChosen);\n        }\n\n        return {\n          chosenOptionsSelected: [],\n          availableOptionsSelected: [],\n          chosenOptions: newChosen,\n          availableOptions: newAvailable\n        };\n      });\n    };\n\n    this.onOptionSelect = (e, index, isChosen) => {\n      this.setState(prevState => {\n        const originalArray = isChosen ? prevState.chosenOptionsSelected : prevState.availableOptionsSelected;\n        let updatedArray = null;\n\n        if (originalArray.indexOf(index) !== -1) {\n          updatedArray = originalArray.filter(value => value !== index);\n        } else {\n          updatedArray = [...originalArray, index];\n        }\n\n        return {\n          chosenOptionsSelected: isChosen ? updatedArray : prevState.chosenOptionsSelected,\n          availableOptionsSelected: isChosen ? prevState.availableOptionsSelected : updatedArray\n        };\n      });\n      const onOptionSelect = this.props.onOptionSelect;\n\n      if (onOptionSelect) {\n        onOptionSelect(e);\n      }\n    };\n\n    this.handleKeys = event => {\n      const key = event.key;\n      let moveFocus = false;\n      let currentIndex = -1;\n      const controls = Array.from(this.controlsEl.current.getElementsByClassName('pf-c-button'));\n\n      if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(event.key)) {\n        if (document.activeElement === this.controlsEl.current) {\n          currentIndex = 0;\n\n          while (currentIndex < controls.length && currentIndex >= 0 && controls[currentIndex].classList.contains('pf-m-disabled')) {\n            currentIndex = currentIndex + 1;\n          }\n\n          moveFocus = true;\n          event.preventDefault();\n        } else {\n          controls.forEach((control, index) => {\n            if (document.activeElement === control) {\n              const increment = key === 'ArrowUp' || key === 'ArrowLeft' ? -1 : 1;\n              currentIndex = index + increment;\n\n              while (currentIndex < controls.length && currentIndex >= 0 && controls[currentIndex].classList.contains('pf-m-disabled')) {\n                currentIndex = currentIndex + increment;\n              }\n\n              moveFocus = true;\n              event.preventDefault();\n            }\n          });\n        }\n      }\n\n      if (moveFocus && controls[currentIndex]) {\n        controls[currentIndex].focus();\n      }\n    };\n\n    this.state = {\n      availableOptions: [...this.props.availableOptions],\n      availableOptionsSelected: [],\n      chosenOptions: [...this.props.chosenOptions],\n      chosenOptionsSelected: []\n    };\n  }\n\n  componentDidUpdate() {\n    if (JSON.stringify(this.props.availableOptions) !== JSON.stringify(this.state.availableOptions) || JSON.stringify(this.props.chosenOptions) !== JSON.stringify(this.state.chosenOptions)) {\n      this.setState({\n        availableOptions: [...this.props.availableOptions],\n        chosenOptions: [...this.props.chosenOptions]\n      });\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleKeys);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeys);\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      availableOptionsTitle,\n      availableOptionsActions,\n      availableOptionsSearchAriaLabel,\n      className,\n      chosenOptionsTitle,\n      chosenOptionsActions,\n      chosenOptionsSearchAriaLabel,\n      filterOption,\n      isSearchable,\n      chosenOptionsStatus,\n      availableOptionsStatus,\n      controlsAriaLabel,\n      addAllAriaLabel,\n      addSelectedAriaLabel,\n      removeSelectedAriaLabel,\n      removeAllAriaLabel,\n\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      availableOptions: consumerPassedAvailableOptions,\n      chosenOptions: consumerPassedChosenOptions,\n      removeSelected,\n      addAll,\n      removeAll,\n      addSelected,\n      onListChange,\n      id\n    } = _a,\n          props = __rest(_a, [\"availableOptionsTitle\", \"availableOptionsActions\", \"availableOptionsSearchAriaLabel\", \"className\", \"chosenOptionsTitle\", \"chosenOptionsActions\", \"chosenOptionsSearchAriaLabel\", \"filterOption\", \"isSearchable\", \"chosenOptionsStatus\", \"availableOptionsStatus\", \"controlsAriaLabel\", \"addAllAriaLabel\", \"addSelectedAriaLabel\", \"removeSelectedAriaLabel\", \"removeAllAriaLabel\", \"availableOptions\", \"chosenOptions\", \"removeSelected\", \"addAll\", \"removeAll\", \"addSelected\", \"onListChange\", \"id\"]);\n\n    const {\n      availableOptions,\n      chosenOptions,\n      chosenOptionsSelected,\n      availableOptionsSelected\n    } = this.state;\n    const availableOptionsStatusToDisplay = availableOptionsStatus || `${availableOptionsSelected.length} of ${availableOptions.length} items selected`;\n    const chosenOptionsStatusToDisplay = chosenOptionsStatus || `${chosenOptionsSelected.length} of ${chosenOptions.length} items selected`;\n    return React.createElement(\"div\", Object.assign({\n      className: css(styles.dualListSelector, className),\n      id: id\n    }, props), React.createElement(DualListSelectorPane, {\n      isSearchable: isSearchable,\n      searchInputAriaLabel: availableOptionsSearchAriaLabel,\n      filterOption: filterOption,\n      status: availableOptionsStatusToDisplay,\n      title: availableOptionsTitle,\n      options: availableOptions,\n      selectedOptions: availableOptionsSelected,\n      onOptionSelect: this.onOptionSelect,\n      actions: availableOptionsActions,\n      id: `${id}-available-pane`\n    }), React.createElement(\"div\", {\n      className: css(styles.dualListSelectorControls),\n      tabIndex: 0,\n      ref: this.controlsEl,\n      \"aria-label\": controlsAriaLabel\n    }, React.createElement(\"div\", {\n      className: css('pf-c-dual-list-selector__controls-item')\n    }, React.createElement(Button, {\n      isDisabled: availableOptions.length === 0,\n      \"aria-disabled\": availableOptions.length === 0,\n      variant: ButtonVariant.plain,\n      onClick: this.addAll,\n      \"aria-label\": addAllAriaLabel,\n      tabIndex: -1\n    }, React.createElement(AngleDoubleRightIcon, null))), React.createElement(\"div\", {\n      className: css('pf-c-dual-list-selector__controls-item')\n    }, React.createElement(Button, {\n      isDisabled: availableOptionsSelected.length === 0,\n      \"aria-disabled\": availableOptionsSelected.length === 0,\n      variant: ButtonVariant.plain,\n      onClick: this.addSelected,\n      \"aria-label\": addSelectedAriaLabel,\n      tabIndex: -1\n    }, React.createElement(AngleRightIcon, null))), React.createElement(\"div\", {\n      className: css('pf-c-dual-list-selector__controls-item')\n    }, React.createElement(Button, {\n      variant: ButtonVariant.plain,\n      onClick: this.removeSelected,\n      \"aria-label\": removeSelectedAriaLabel,\n      tabIndex: -1,\n      isDisabled: chosenOptionsSelected.length === 0,\n      \"aria-disabled\": chosenOptionsSelected.length === 0\n    }, React.createElement(AngleLeftIcon, null))), React.createElement(\"div\", {\n      className: css('pf-c-dual-list-selector__controls-item')\n    }, React.createElement(Button, {\n      isDisabled: chosenOptions.length === 0,\n      \"aria-disabled\": chosenOptions.length === 0,\n      variant: ButtonVariant.plain,\n      onClick: this.removeAll,\n      \"aria-label\": removeAllAriaLabel,\n      tabIndex: -1\n    }, React.createElement(AngleDoubleLeftIcon, null)))), React.createElement(DualListSelectorPane, {\n      isChosen: true,\n      isSearchable: isSearchable,\n      searchInputAriaLabel: chosenOptionsSearchAriaLabel,\n      filterOption: filterOption,\n      title: chosenOptionsTitle,\n      status: chosenOptionsStatusToDisplay,\n      options: chosenOptions,\n      selectedOptions: chosenOptionsSelected,\n      onOptionSelect: this.onOptionSelect,\n      actions: chosenOptionsActions,\n      id: `${id}-chosen-pane`\n    }));\n  }\n\n}\nDualListSelector.displayName = 'DualListSelector';\nDualListSelector.defaultProps = {\n  availableOptions: [],\n  availableOptionsTitle: 'Available options',\n  availableOptionsSearchAriaLabel: 'Available search input',\n  chosenOptions: [],\n  chosenOptionsTitle: 'Chosen options',\n  chosenOptionsSearchAriaLabel: 'Chosen search input',\n  id: getUniqueId('dual-list-selector'),\n  controlsAriaLabel: 'Selector controls',\n  addAllAriaLabel: 'Add all',\n  addSelectedAriaLabel: 'Add selected',\n  removeSelectedAriaLabel: 'Remove selected',\n  removeAllAriaLabel: 'Remove all'\n};","map":{"version":3,"sources":["../../../../src/components/DualListSelector/DualListSelector.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { Button, ButtonVariant } from '../Button';\nimport AngleDoubleLeftIcon from \"@patternfly/react-icons/dist/esm/icons/angle-double-left-icon\";\nimport AngleLeftIcon from \"@patternfly/react-icons/dist/esm/icons/angle-left-icon\";\nimport AngleDoubleRightIcon from \"@patternfly/react-icons/dist/esm/icons/angle-double-right-icon\";\nimport AngleRightIcon from \"@patternfly/react-icons/dist/esm/icons/angle-right-icon\";\nimport { DualListSelectorPane } from './DualListSelectorPane';\nimport { getUniqueId } from '../../helpers';\nexport class DualListSelector extends React.Component {\n    constructor(props) {\n        super(props);\n        this.controlsEl = React.createRef();\n        this.addAll = () => {\n            this.setState(prevState => {\n                const newChosen = [...prevState.chosenOptions, ...prevState.availableOptions];\n                if (this.props.addAll) {\n                    this.props.addAll([], newChosen);\n                }\n                if (this.props.onListChange) {\n                    this.props.onListChange([], newChosen);\n                }\n                return {\n                    availableOptions: [],\n                    availableOptionsSelected: [],\n                    chosenOptions: newChosen,\n                    chosenOptionsSelected: []\n                };\n            });\n        };\n        this.removeAll = () => {\n            this.setState(prevState => {\n                const newAvailable = [...prevState.chosenOptions, ...prevState.availableOptions];\n                if (this.props.removeAll) {\n                    this.props.removeAll(newAvailable, []);\n                }\n                if (this.props.onListChange) {\n                    this.props.onListChange(newAvailable, []);\n                }\n                return {\n                    availableOptions: newAvailable,\n                    availableOptionsSelected: [],\n                    chosenOptions: [],\n                    chosenOptionsSelected: []\n                };\n            });\n        };\n        this.addSelected = () => {\n            this.setState(prevState => {\n                const itemsToRemove = [];\n                const newAvailable = [];\n                prevState.availableOptions.forEach((value, index) => {\n                    if (prevState.availableOptionsSelected.indexOf(index) !== -1) {\n                        itemsToRemove.push(value);\n                    }\n                    else {\n                        newAvailable.push(value);\n                    }\n                });\n                const newChosen = [...prevState.chosenOptions, ...itemsToRemove];\n                if (this.props.addSelected) {\n                    this.props.addSelected(newAvailable, newChosen);\n                }\n                if (this.props.onListChange) {\n                    this.props.onListChange(newAvailable, newChosen);\n                }\n                return {\n                    chosenOptionsSelected: [],\n                    availableOptionsSelected: [],\n                    chosenOptions: newChosen,\n                    availableOptions: newAvailable\n                };\n            });\n        };\n        this.removeSelected = () => {\n            this.setState(prevState => {\n                const itemsToRemove = [];\n                const newChosen = [];\n                prevState.chosenOptions.forEach((value, index) => {\n                    if (prevState.chosenOptionsSelected.indexOf(index) !== -1) {\n                        itemsToRemove.push(value);\n                    }\n                    else {\n                        newChosen.push(value);\n                    }\n                });\n                const newAvailable = [...prevState.availableOptions, ...itemsToRemove];\n                if (this.props.removeSelected) {\n                    this.props.removeSelected(newAvailable, newChosen);\n                }\n                if (this.props.onListChange) {\n                    this.props.onListChange(newAvailable, newChosen);\n                }\n                return {\n                    chosenOptionsSelected: [],\n                    availableOptionsSelected: [],\n                    chosenOptions: newChosen,\n                    availableOptions: newAvailable\n                };\n            });\n        };\n        this.onOptionSelect = (e, index, isChosen) => {\n            this.setState(prevState => {\n                const originalArray = isChosen ? prevState.chosenOptionsSelected : prevState.availableOptionsSelected;\n                let updatedArray = null;\n                if (originalArray.indexOf(index) !== -1) {\n                    updatedArray = originalArray.filter(value => value !== index);\n                }\n                else {\n                    updatedArray = [...originalArray, index];\n                }\n                return {\n                    chosenOptionsSelected: isChosen ? updatedArray : prevState.chosenOptionsSelected,\n                    availableOptionsSelected: isChosen ? prevState.availableOptionsSelected : updatedArray\n                };\n            });\n            const onOptionSelect = this.props.onOptionSelect;\n            if (onOptionSelect) {\n                onOptionSelect(e);\n            }\n        };\n        this.handleKeys = (event) => {\n            const key = event.key;\n            let moveFocus = false;\n            let currentIndex = -1;\n            const controls = Array.from(this.controlsEl.current.getElementsByClassName('pf-c-button'));\n            if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(event.key)) {\n                if (document.activeElement === this.controlsEl.current) {\n                    currentIndex = 0;\n                    while (currentIndex < controls.length &&\n                        currentIndex >= 0 &&\n                        controls[currentIndex].classList.contains('pf-m-disabled')) {\n                        currentIndex = currentIndex + 1;\n                    }\n                    moveFocus = true;\n                    event.preventDefault();\n                }\n                else {\n                    controls.forEach((control, index) => {\n                        if (document.activeElement === control) {\n                            const increment = key === 'ArrowUp' || key === 'ArrowLeft' ? -1 : 1;\n                            currentIndex = index + increment;\n                            while (currentIndex < controls.length &&\n                                currentIndex >= 0 &&\n                                controls[currentIndex].classList.contains('pf-m-disabled')) {\n                                currentIndex = currentIndex + increment;\n                            }\n                            moveFocus = true;\n                            event.preventDefault();\n                        }\n                    });\n                }\n            }\n            if (moveFocus && controls[currentIndex]) {\n                controls[currentIndex].focus();\n            }\n        };\n        this.state = {\n            availableOptions: [...this.props.availableOptions],\n            availableOptionsSelected: [],\n            chosenOptions: [...this.props.chosenOptions],\n            chosenOptionsSelected: []\n        };\n    }\n    componentDidUpdate() {\n        if (JSON.stringify(this.props.availableOptions) !== JSON.stringify(this.state.availableOptions) ||\n            JSON.stringify(this.props.chosenOptions) !== JSON.stringify(this.state.chosenOptions)) {\n            this.setState({\n                availableOptions: [...this.props.availableOptions],\n                chosenOptions: [...this.props.chosenOptions]\n            });\n        }\n    }\n    componentDidMount() {\n        window.addEventListener('keydown', this.handleKeys);\n    }\n    componentWillUnmount() {\n        window.removeEventListener('keydown', this.handleKeys);\n    }\n    render() {\n        const _a = this.props, { availableOptionsTitle, availableOptionsActions, availableOptionsSearchAriaLabel, className, chosenOptionsTitle, chosenOptionsActions, chosenOptionsSearchAriaLabel, filterOption, isSearchable, chosenOptionsStatus, availableOptionsStatus, controlsAriaLabel, addAllAriaLabel, addSelectedAriaLabel, removeSelectedAriaLabel, removeAllAriaLabel, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        availableOptions: consumerPassedAvailableOptions, chosenOptions: consumerPassedChosenOptions, removeSelected, addAll, removeAll, addSelected, onListChange, id } = _a, props = __rest(_a, [\"availableOptionsTitle\", \"availableOptionsActions\", \"availableOptionsSearchAriaLabel\", \"className\", \"chosenOptionsTitle\", \"chosenOptionsActions\", \"chosenOptionsSearchAriaLabel\", \"filterOption\", \"isSearchable\", \"chosenOptionsStatus\", \"availableOptionsStatus\", \"controlsAriaLabel\", \"addAllAriaLabel\", \"addSelectedAriaLabel\", \"removeSelectedAriaLabel\", \"removeAllAriaLabel\", \"availableOptions\", \"chosenOptions\", \"removeSelected\", \"addAll\", \"removeAll\", \"addSelected\", \"onListChange\", \"id\"]);\n        const { availableOptions, chosenOptions, chosenOptionsSelected, availableOptionsSelected } = this.state;\n        const availableOptionsStatusToDisplay = availableOptionsStatus || `${availableOptionsSelected.length} of ${availableOptions.length} items selected`;\n        const chosenOptionsStatusToDisplay = chosenOptionsStatus || `${chosenOptionsSelected.length} of ${chosenOptions.length} items selected`;\n        return (React.createElement(\"div\", Object.assign({ className: css(styles.dualListSelector, className), id: id }, props),\n            React.createElement(DualListSelectorPane, { isSearchable: isSearchable, searchInputAriaLabel: availableOptionsSearchAriaLabel, filterOption: filterOption, status: availableOptionsStatusToDisplay, title: availableOptionsTitle, options: availableOptions, selectedOptions: availableOptionsSelected, onOptionSelect: this.onOptionSelect, actions: availableOptionsActions, id: `${id}-available-pane` }),\n            React.createElement(\"div\", { className: css(styles.dualListSelectorControls), tabIndex: 0, ref: this.controlsEl, \"aria-label\": controlsAriaLabel },\n                React.createElement(\"div\", { className: css('pf-c-dual-list-selector__controls-item') },\n                    React.createElement(Button, { isDisabled: availableOptions.length === 0, \"aria-disabled\": availableOptions.length === 0, variant: ButtonVariant.plain, onClick: this.addAll, \"aria-label\": addAllAriaLabel, tabIndex: -1 },\n                        React.createElement(AngleDoubleRightIcon, null))),\n                React.createElement(\"div\", { className: css('pf-c-dual-list-selector__controls-item') },\n                    React.createElement(Button, { isDisabled: availableOptionsSelected.length === 0, \"aria-disabled\": availableOptionsSelected.length === 0, variant: ButtonVariant.plain, onClick: this.addSelected, \"aria-label\": addSelectedAriaLabel, tabIndex: -1 },\n                        React.createElement(AngleRightIcon, null))),\n                React.createElement(\"div\", { className: css('pf-c-dual-list-selector__controls-item') },\n                    React.createElement(Button, { variant: ButtonVariant.plain, onClick: this.removeSelected, \"aria-label\": removeSelectedAriaLabel, tabIndex: -1, isDisabled: chosenOptionsSelected.length === 0, \"aria-disabled\": chosenOptionsSelected.length === 0 },\n                        React.createElement(AngleLeftIcon, null))),\n                React.createElement(\"div\", { className: css('pf-c-dual-list-selector__controls-item') },\n                    React.createElement(Button, { isDisabled: chosenOptions.length === 0, \"aria-disabled\": chosenOptions.length === 0, variant: ButtonVariant.plain, onClick: this.removeAll, \"aria-label\": removeAllAriaLabel, tabIndex: -1 },\n                        React.createElement(AngleDoubleLeftIcon, null)))),\n            React.createElement(DualListSelectorPane, { isChosen: true, isSearchable: isSearchable, searchInputAriaLabel: chosenOptionsSearchAriaLabel, filterOption: filterOption, title: chosenOptionsTitle, status: chosenOptionsStatusToDisplay, options: chosenOptions, selectedOptions: chosenOptionsSelected, onOptionSelect: this.onOptionSelect, actions: chosenOptionsActions, id: `${id}-chosen-pane` })));\n    }\n}\nDualListSelector.displayName = 'DualListSelector';\nDualListSelector.defaultProps = {\n    availableOptions: [],\n    availableOptionsTitle: 'Available options',\n    availableOptionsSearchAriaLabel: 'Available search input',\n    chosenOptions: [],\n    chosenOptionsTitle: 'Chosen options',\n    chosenOptionsSearchAriaLabel: 'Chosen search input',\n    id: getUniqueId('dual-list-selector'),\n    controlsAriaLabel: 'Selector controls',\n    addAllAriaLabel: 'Add all',\n    addSelectedAriaLabel: 'Add selected',\n    removeSelectedAriaLabel: 'Remove selected',\n    removeAllAriaLabel: 'Remove all'\n};\n//# sourceMappingURL=DualListSelector.js.map"]},"metadata":{},"sourceType":"module"}