{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/JumpLinks/jump-links';\nimport { JumpLinksItem } from './JumpLinksItem';\n\nconst getScrollItems = (children, hasScrollSpy) => React.Children.toArray(children).map(child => {\n  if (hasScrollSpy && typeof document !== 'undefined' && child.type === JumpLinksItem) {\n    const scrollNode = child.props.node || child.props.href;\n\n    if (typeof scrollNode === 'string' && typeof document !== 'undefined') {\n      return document.querySelector(scrollNode);\n    } else if (scrollNode instanceof HTMLElement) {\n      return scrollNode;\n    }\n  }\n\n  return null;\n});\n\nexport const JumpLinks = _a => {\n  var {\n    isCentered,\n    isVertical,\n    children,\n    label,\n    'aria-label': ariaLabel = typeof label === 'string' ? label : null,\n    scrollableSelector,\n    activeIndex: activeIndexProp = 0\n  } = _a,\n      props = __rest(_a, [\"isCentered\", \"isVertical\", \"children\", \"label\", 'aria-label', \"scrollableSelector\", \"activeIndex\"]);\n\n  const hasScrollSpy = Boolean(scrollableSelector);\n  const [scrollItems, setScrollItems] = React.useState(getScrollItems(children, hasScrollSpy));\n  const [activeIndex, setActiveIndex] = React.useState(activeIndexProp);\n\n  if (hasScrollSpy) {\n    React.useEffect(() => {\n      if (typeof window === 'undefined') {\n        return;\n      }\n\n      const scrollableElement = document.querySelector(scrollableSelector);\n\n      if (!(scrollableElement instanceof HTMLElement)) {\n        return;\n      }\n\n      function scrollSpy() {\n        const scrollPosition = scrollableElement.scrollTop;\n        window.requestAnimationFrame(() => {\n          let newScrollItems = scrollItems; // Items might have rendered after this component. Do a quick refresh.\n\n          if (!newScrollItems[0]) {\n            newScrollItems = getScrollItems(children, hasScrollSpy);\n            setScrollItems(newScrollItems);\n          }\n\n          const scrollElements = newScrollItems.map((e, index) => ({\n            y: e ? e.offsetTop : null,\n            index\n          })).filter(({\n            y\n          }) => y !== null).sort((e1, e2) => e2.y - e1.y);\n\n          for (const {\n            y,\n            index\n          } of scrollElements) {\n            if (scrollPosition >= y) {\n              return setActiveIndex(index);\n            }\n          }\n        });\n      }\n\n      if (scrollableElement) {\n        scrollSpy();\n        scrollableElement.addEventListener('scroll', scrollSpy);\n      }\n\n      return () => scrollableElement.removeEventListener('scroll', scrollSpy);\n    }, [scrollItems, hasScrollSpy]);\n  }\n\n  return React.createElement(\"nav\", Object.assign({\n    className: css(styles.jumpLinks, isCentered && styles.modifiers.center, isVertical && styles.modifiers.vertical),\n    \"aria-label\": ariaLabel\n  }, props), React.createElement(\"div\", {\n    className: styles.jumpLinksMain\n  }, label && React.createElement(\"div\", {\n    className: styles.jumpLinksLabel\n  }, label), React.createElement(\"ul\", {\n    className: styles.jumpLinksList\n  }, React.Children.map(children, (child, i) => {\n    if (hasScrollSpy && child.type === JumpLinksItem) {\n      const {\n        onClick: onClickProp,\n        isActive: isActiveProp\n      } = child.props;\n      const scrollItem = scrollItems[i];\n      return React.cloneElement(child, {\n        onClick(ev) {\n          // Items might have rendered after this component. Do a quick refresh.\n          let newScrollItems;\n\n          if (!scrollItem) {\n            newScrollItems = getScrollItems(children, hasScrollSpy);\n            setScrollItems(newScrollItems);\n          }\n\n          const newScrollItem = scrollItem || newScrollItems[i];\n\n          if (newScrollItem) {\n            newScrollItem.scrollIntoView();\n            newScrollItem.focus();\n            ev.preventDefault();\n          }\n\n          if (onClickProp) {\n            onClickProp(ev);\n          }\n        },\n\n        isActive: isActiveProp || activeIndex === i\n      });\n    }\n\n    return child;\n  }))));\n};\nJumpLinks.displayName = 'JumpLinks';","map":{"version":3,"sources":["../../../../src/components/JumpLinks/JumpLinks.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/JumpLinks/jump-links';\nimport { JumpLinksItem } from './JumpLinksItem';\nconst getScrollItems = (children, hasScrollSpy) => React.Children.toArray(children).map((child) => {\n    if (hasScrollSpy && typeof document !== 'undefined' && child.type === JumpLinksItem) {\n        const scrollNode = child.props.node || child.props.href;\n        if (typeof scrollNode === 'string' && typeof document !== 'undefined') {\n            return document.querySelector(scrollNode);\n        }\n        else if (scrollNode instanceof HTMLElement) {\n            return scrollNode;\n        }\n    }\n    return null;\n});\nexport const JumpLinks = (_a) => {\n    var { isCentered, isVertical, children, label, 'aria-label': ariaLabel = typeof label === 'string' ? label : null, scrollableSelector, activeIndex: activeIndexProp = 0 } = _a, props = __rest(_a, [\"isCentered\", \"isVertical\", \"children\", \"label\", 'aria-label', \"scrollableSelector\", \"activeIndex\"]);\n    const hasScrollSpy = Boolean(scrollableSelector);\n    const [scrollItems, setScrollItems] = React.useState(getScrollItems(children, hasScrollSpy));\n    const [activeIndex, setActiveIndex] = React.useState(activeIndexProp);\n    if (hasScrollSpy) {\n        React.useEffect(() => {\n            if (typeof window === 'undefined') {\n                return;\n            }\n            const scrollableElement = document.querySelector(scrollableSelector);\n            if (!(scrollableElement instanceof HTMLElement)) {\n                return;\n            }\n            function scrollSpy() {\n                const scrollPosition = scrollableElement.scrollTop;\n                window.requestAnimationFrame(() => {\n                    let newScrollItems = scrollItems;\n                    // Items might have rendered after this component. Do a quick refresh.\n                    if (!newScrollItems[0]) {\n                        newScrollItems = getScrollItems(children, hasScrollSpy);\n                        setScrollItems(newScrollItems);\n                    }\n                    const scrollElements = newScrollItems\n                        .map((e, index) => ({\n                        y: e ? e.offsetTop : null,\n                        index\n                    }))\n                        .filter(({ y }) => y !== null)\n                        .sort((e1, e2) => e2.y - e1.y);\n                    for (const { y, index } of scrollElements) {\n                        if (scrollPosition >= y) {\n                            return setActiveIndex(index);\n                        }\n                    }\n                });\n            }\n            if (scrollableElement) {\n                scrollSpy();\n                scrollableElement.addEventListener('scroll', scrollSpy);\n            }\n            return () => scrollableElement.removeEventListener('scroll', scrollSpy);\n        }, [scrollItems, hasScrollSpy]);\n    }\n    return (React.createElement(\"nav\", Object.assign({ className: css(styles.jumpLinks, isCentered && styles.modifiers.center, isVertical && styles.modifiers.vertical), \"aria-label\": ariaLabel }, props),\n        React.createElement(\"div\", { className: styles.jumpLinksMain },\n            label && React.createElement(\"div\", { className: styles.jumpLinksLabel }, label),\n            React.createElement(\"ul\", { className: styles.jumpLinksList }, React.Children.map(children, (child, i) => {\n                if (hasScrollSpy && child.type === JumpLinksItem) {\n                    const { onClick: onClickProp, isActive: isActiveProp } = child.props;\n                    const scrollItem = scrollItems[i];\n                    return React.cloneElement(child, {\n                        onClick(ev) {\n                            // Items might have rendered after this component. Do a quick refresh.\n                            let newScrollItems;\n                            if (!scrollItem) {\n                                newScrollItems = getScrollItems(children, hasScrollSpy);\n                                setScrollItems(newScrollItems);\n                            }\n                            const newScrollItem = scrollItem || newScrollItems[i];\n                            if (newScrollItem) {\n                                newScrollItem.scrollIntoView();\n                                newScrollItem.focus();\n                                ev.preventDefault();\n                            }\n                            if (onClickProp) {\n                                onClickProp(ev);\n                            }\n                        },\n                        isActive: isActiveProp || activeIndex === i\n                    });\n                }\n                return child;\n            })))));\n};\nJumpLinks.displayName = 'JumpLinks';\n//# sourceMappingURL=JumpLinks.js.map"]},"metadata":{},"sourceType":"module"}