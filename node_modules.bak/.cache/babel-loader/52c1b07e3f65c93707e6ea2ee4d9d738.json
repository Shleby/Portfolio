{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport { css } from '@patternfly/react-styles';\nimport { capitalize, ValidatedOptions } from '../../helpers';\nexport var TextAreResizeOrientation;\n\n(function (TextAreResizeOrientation) {\n  TextAreResizeOrientation[\"horizontal\"] = \"horizontal\";\n  TextAreResizeOrientation[\"vertical\"] = \"vertical\";\n  TextAreResizeOrientation[\"both\"] = \"both\";\n})(TextAreResizeOrientation || (TextAreResizeOrientation = {}));\n\nexport class TextAreaBase extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      if (this.props.onChange) {\n        this.props.onChange(event.currentTarget.value, event);\n      }\n    };\n\n    if (!props.id && !props['aria-label']) {\n      // eslint-disable-next-line no-console\n      console.error('TextArea: TextArea requires either an id or aria-label to be specified');\n    }\n  }\n\n  render() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _a = this.props,\n          {\n      className,\n      value,\n      onChange,\n      validated,\n      isRequired,\n      resizeOrientation,\n      innerRef\n    } = _a,\n          props = __rest(_a, [\"className\", \"value\", \"onChange\", \"validated\", \"isRequired\", \"resizeOrientation\", \"innerRef\"]);\n\n    const orientation = `resize${capitalize(resizeOrientation)}`;\n    return React.createElement(\"textarea\", Object.assign({\n      className: css(styles.formControl, className, resizeOrientation !== TextAreResizeOrientation.both && styles.modifiers[orientation], validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning),\n      onChange: this.handleChange\n    }, typeof this.props.defaultValue !== 'string' && {\n      value\n    }, {\n      \"aria-invalid\": validated === ValidatedOptions.error,\n      required: isRequired,\n      ref: innerRef\n    }, props));\n  }\n\n}\nTextAreaBase.displayName = 'TextArea';\nTextAreaBase.defaultProps = {\n  innerRef: React.createRef(),\n  className: '',\n  isRequired: false,\n  validated: 'default',\n  resizeOrientation: 'both',\n  'aria-label': null\n};\nexport const TextArea = React.forwardRef((props, ref) => React.createElement(TextAreaBase, Object.assign({}, props, {\n  innerRef: ref\n})));\nTextArea.displayName = 'TextArea';","map":{"version":3,"sources":["../../../../src/components/TextArea/TextArea.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport { css } from '@patternfly/react-styles';\nimport { capitalize, ValidatedOptions } from '../../helpers';\nexport var TextAreResizeOrientation;\n(function (TextAreResizeOrientation) {\n    TextAreResizeOrientation[\"horizontal\"] = \"horizontal\";\n    TextAreResizeOrientation[\"vertical\"] = \"vertical\";\n    TextAreResizeOrientation[\"both\"] = \"both\";\n})(TextAreResizeOrientation || (TextAreResizeOrientation = {}));\nexport class TextAreaBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = (event) => {\n            if (this.props.onChange) {\n                this.props.onChange(event.currentTarget.value, event);\n            }\n        };\n        if (!props.id && !props['aria-label']) {\n            // eslint-disable-next-line no-console\n            console.error('TextArea: TextArea requires either an id or aria-label to be specified');\n        }\n    }\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _a = this.props, { className, value, onChange, validated, isRequired, resizeOrientation, innerRef } = _a, props = __rest(_a, [\"className\", \"value\", \"onChange\", \"validated\", \"isRequired\", \"resizeOrientation\", \"innerRef\"]);\n        const orientation = `resize${capitalize(resizeOrientation)}`;\n        return (React.createElement(\"textarea\", Object.assign({ className: css(styles.formControl, className, resizeOrientation !== TextAreResizeOrientation.both && styles.modifiers[orientation], validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning), onChange: this.handleChange }, (typeof this.props.defaultValue !== 'string' && { value }), { \"aria-invalid\": validated === ValidatedOptions.error, required: isRequired, ref: innerRef }, props)));\n    }\n}\nTextAreaBase.displayName = 'TextArea';\nTextAreaBase.defaultProps = {\n    innerRef: React.createRef(),\n    className: '',\n    isRequired: false,\n    validated: 'default',\n    resizeOrientation: 'both',\n    'aria-label': null\n};\nexport const TextArea = React.forwardRef((props, ref) => (React.createElement(TextAreaBase, Object.assign({}, props, { innerRef: ref }))));\nTextArea.displayName = 'TextArea';\n//# sourceMappingURL=TextArea.js.map"]},"metadata":{},"sourceType":"module"}