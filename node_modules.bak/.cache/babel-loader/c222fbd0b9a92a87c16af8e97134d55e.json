{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Form, FormGroup, ActionGroup, FormHelperText } from '../Form';\nimport { TextInput } from '../TextInput';\nimport { Button } from '../Button';\nimport { Checkbox } from '../Checkbox';\nimport { ValidatedOptions } from '../../helpers/constants';\nexport const LoginForm = _a => {\n  var {\n    noAutoFocus = false,\n    className = '',\n    showHelperText = false,\n    helperText = null,\n    helperTextIcon = null,\n    usernameLabel = 'Username',\n    usernameValue = '',\n    onChangeUsername = () => undefined,\n    isValidUsername = true,\n    passwordLabel = 'Password',\n    passwordValue = '',\n    onChangePassword = () => undefined,\n    isValidPassword = true,\n    loginButtonLabel = 'Log In',\n    isLoginButtonDisabled = false,\n    onLoginButtonClick = () => undefined,\n    rememberMeLabel = '',\n    isRememberMeChecked = false,\n    onChangeRememberMe = () => undefined\n  } = _a,\n      props = __rest(_a, [\"noAutoFocus\", \"className\", \"showHelperText\", \"helperText\", \"helperTextIcon\", \"usernameLabel\", \"usernameValue\", \"onChangeUsername\", \"isValidUsername\", \"passwordLabel\", \"passwordValue\", \"onChangePassword\", \"isValidPassword\", \"loginButtonLabel\", \"isLoginButtonDisabled\", \"onLoginButtonClick\", \"rememberMeLabel\", \"isRememberMeChecked\", \"onChangeRememberMe\"]);\n\n  return React.createElement(Form, Object.assign({\n    className: className\n  }, props), React.createElement(FormHelperText, {\n    isError: !isValidUsername || !isValidPassword,\n    isHidden: !showHelperText,\n    icon: helperTextIcon\n  }, helperText), React.createElement(FormGroup, {\n    label: usernameLabel,\n    isRequired: true,\n    validated: isValidUsername ? ValidatedOptions.default : ValidatedOptions.error,\n    fieldId: \"pf-login-username-id\"\n  }, React.createElement(TextInput, {\n    autoFocus: !noAutoFocus,\n    id: \"pf-login-username-id\",\n    isRequired: true,\n    validated: isValidUsername ? ValidatedOptions.default : ValidatedOptions.error,\n    type: \"text\",\n    name: \"pf-login-username-id\",\n    value: usernameValue,\n    onChange: onChangeUsername\n  })), React.createElement(FormGroup, {\n    label: passwordLabel,\n    isRequired: true,\n    validated: isValidPassword ? ValidatedOptions.default : ValidatedOptions.error,\n    fieldId: \"pf-login-password-id\"\n  }, React.createElement(TextInput, {\n    isRequired: true,\n    type: \"password\",\n    id: \"pf-login-password-id\",\n    name: \"pf-login-password-id\",\n    validated: isValidPassword ? ValidatedOptions.default : ValidatedOptions.error,\n    value: passwordValue,\n    onChange: onChangePassword\n  })), rememberMeLabel.length > 0 && React.createElement(FormGroup, {\n    fieldId: \"pf-login-remember-me-id\"\n  }, React.createElement(Checkbox, {\n    id: \"pf-login-remember-me-id\",\n    label: rememberMeLabel,\n    isChecked: isRememberMeChecked,\n    onChange: onChangeRememberMe\n  })), React.createElement(ActionGroup, null, React.createElement(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    onClick: onLoginButtonClick,\n    isBlock: true,\n    isDisabled: isLoginButtonDisabled\n  }, loginButtonLabel)));\n};\nLoginForm.displayName = 'LoginForm';","map":{"version":3,"sources":["../../../../src/components/LoginPage/LoginForm.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Form, FormGroup, ActionGroup, FormHelperText } from '../Form';\nimport { TextInput } from '../TextInput';\nimport { Button } from '../Button';\nimport { Checkbox } from '../Checkbox';\nimport { ValidatedOptions } from '../../helpers/constants';\nexport const LoginForm = (_a) => {\n    var { noAutoFocus = false, className = '', showHelperText = false, helperText = null, helperTextIcon = null, usernameLabel = 'Username', usernameValue = '', onChangeUsername = () => undefined, isValidUsername = true, passwordLabel = 'Password', passwordValue = '', onChangePassword = () => undefined, isValidPassword = true, loginButtonLabel = 'Log In', isLoginButtonDisabled = false, onLoginButtonClick = () => undefined, rememberMeLabel = '', isRememberMeChecked = false, onChangeRememberMe = () => undefined } = _a, props = __rest(_a, [\"noAutoFocus\", \"className\", \"showHelperText\", \"helperText\", \"helperTextIcon\", \"usernameLabel\", \"usernameValue\", \"onChangeUsername\", \"isValidUsername\", \"passwordLabel\", \"passwordValue\", \"onChangePassword\", \"isValidPassword\", \"loginButtonLabel\", \"isLoginButtonDisabled\", \"onLoginButtonClick\", \"rememberMeLabel\", \"isRememberMeChecked\", \"onChangeRememberMe\"]);\n    return (React.createElement(Form, Object.assign({ className: className }, props),\n        React.createElement(FormHelperText, { isError: !isValidUsername || !isValidPassword, isHidden: !showHelperText, icon: helperTextIcon }, helperText),\n        React.createElement(FormGroup, { label: usernameLabel, isRequired: true, validated: isValidUsername ? ValidatedOptions.default : ValidatedOptions.error, fieldId: \"pf-login-username-id\" },\n            React.createElement(TextInput, { autoFocus: !noAutoFocus, id: \"pf-login-username-id\", isRequired: true, validated: isValidUsername ? ValidatedOptions.default : ValidatedOptions.error, type: \"text\", name: \"pf-login-username-id\", value: usernameValue, onChange: onChangeUsername })),\n        React.createElement(FormGroup, { label: passwordLabel, isRequired: true, validated: isValidPassword ? ValidatedOptions.default : ValidatedOptions.error, fieldId: \"pf-login-password-id\" },\n            React.createElement(TextInput, { isRequired: true, type: \"password\", id: \"pf-login-password-id\", name: \"pf-login-password-id\", validated: isValidPassword ? ValidatedOptions.default : ValidatedOptions.error, value: passwordValue, onChange: onChangePassword })),\n        rememberMeLabel.length > 0 && (React.createElement(FormGroup, { fieldId: \"pf-login-remember-me-id\" },\n            React.createElement(Checkbox, { id: \"pf-login-remember-me-id\", label: rememberMeLabel, isChecked: isRememberMeChecked, onChange: onChangeRememberMe }))),\n        React.createElement(ActionGroup, null,\n            React.createElement(Button, { variant: \"primary\", type: \"submit\", onClick: onLoginButtonClick, isBlock: true, isDisabled: isLoginButtonDisabled }, loginButtonLabel))));\n};\nLoginForm.displayName = 'LoginForm';\n//# sourceMappingURL=LoginForm.js.map"]},"metadata":{},"sourceType":"module"}